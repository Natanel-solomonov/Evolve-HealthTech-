# Generated by Django for search vector weighting optimization

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('nutrition', '0019_add_prefix_search_indexes'),
    ]

    operations = [
        # Update the search vector trigger function with weighted vectors for better relevance
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION nutrition_foodproduct_search_vector_trigger() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := 
                    setweight(to_tsvector('english', COALESCE(unaccent(NEW.product_name), '')), 'A') ||
                    setweight(to_tsvector('english', COALESCE(unaccent(NEW.brands), '')), 'B') ||
                    setweight(to_tsvector('english', COALESCE(unaccent(NEW.categories), '')), 'C') ||
                    setweight(to_tsvector('english', COALESCE(unaccent(NEW.ingredients_text), '')), 'D');
                RETURN NEW;
            END
            $$ LANGUAGE plpgsql;
            """,
            reverse_sql="""
            CREATE OR REPLACE FUNCTION nutrition_foodproduct_search_vector_trigger() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := to_tsvector('english', 
                    COALESCE(unaccent(NEW.product_name), '') || ' ' || 
                    COALESCE(unaccent(NEW.brands), '') || ' ' ||
                    COALESCE(unaccent(NEW.categories), '') || ' ' ||
                    COALESCE(unaccent(NEW.ingredients_text), '')
                );
                RETURN NEW;
            END
            $$ LANGUAGE plpgsql;
            """
        ),
        
        # Update existing search vectors with weighted versions in batches
        # Note: This will be done by a separate management command to avoid timeouts
        migrations.RunSQL(
            "-- Weighted search vectors will be populated by management command",
            reverse_sql="-- No reverse operation needed"
        ),
    ] 