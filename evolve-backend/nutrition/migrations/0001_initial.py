# Generated by Django 5.2.1 on 2025-06-10 11:44

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodProduct',
            fields=[
                ('_id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('_keywords', models.JSONField(blank=True, default=list, null=True)),
                ('abbreviated_product_name', models.TextField(blank=True, null=True)),
                ('abbreviated_product_name_de', models.TextField(blank=True, null=True)),
                ('abbreviated_product_name_fr', models.TextField(blank=True, null=True)),
                ('added_countries_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives', models.TextField(blank=True, null=True)),
                ('additives_n', models.IntegerField(blank=True, null=True)),
                ('additives_old_n', models.IntegerField(blank=True, null=True)),
                ('additives_old_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives_original_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives_prev_original_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives_tags', models.JSONField(blank=True, default=list, null=True)),
                ('additives_tags_n', models.IntegerField(blank=True, null=True)),
                ('allergens_from_user', models.TextField(blank=True, null=True)),
                ('allergens_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('allergens_tags', models.JSONField(blank=True, default=list, null=True)),
                ('amino_acids_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('amino_acids_tags', models.JSONField(blank=True, default=list, null=True)),
                ('brand_owner', models.TextField(blank=True, null=True)),
                ('brands', models.TextField(blank=True, null=True)),
                ('brands_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('brands_lc', models.TextField(blank=True, null=True)),
                ('brands_tags', models.JSONField(blank=True, default=list, null=True)),
                ('carbon_footprint_from_known_ingredients_debug', models.TextField(blank=True, null=True)),
                ('carbon_footprint_from_meat_or_fish_debug', models.FloatField(blank=True, null=True)),
                ('carbon_footprint_percent_of_known_ingredients', models.FloatField(blank=True, null=True)),
                ('categories', models.TextField(blank=True, null=True)),
                ('categories_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('categories_lc', models.TextField(blank=True, null=True)),
                ('categories_next_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('categories_next_tags', models.JSONField(blank=True, default=list, null=True)),
                ('categories_old', models.TextField(blank=True, null=True)),
                ('categories_prev_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('categories_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('categories_properties', models.JSONField(blank=True, default=dict, null=True)),
                ('categories_properties_tags', models.JSONField(blank=True, default=list, null=True)),
                ('categories_tags', models.JSONField(blank=True, default=list, null=True)),
                ('category_properties', models.JSONField(blank=True, default=dict, null=True)),
                ('checked', models.TextField(blank=True, null=True)),
                ('checkers', models.JSONField(blank=True, default=list, null=True)),
                ('ciqual_food_name_tags', models.JSONField(blank=True, default=list, null=True)),
                ('cities_tags', models.JSONField(blank=True, default=list, null=True)),
                ('compared_to_category', models.TextField(blank=True, null=True)),
                ('completed_t', models.BigIntegerField(blank=True, null=True)),
                ('completeness', models.FloatField(blank=True, null=True)),
                ('conservation_conditions', models.TextField(blank=True, null=True)),
                ('conservation_conditions_de', models.TextField(blank=True, null=True)),
                ('conservation_conditions_fr', models.TextField(blank=True, null=True)),
                ('conservation_conditions_nl', models.TextField(blank=True, null=True)),
                ('countries', models.TextField(blank=True, null=True)),
                ('countries_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('countries_lc', models.TextField(blank=True, null=True)),
                ('countries_tags', models.JSONField(blank=True, default=list, null=True)),
                ('creator', models.TextField(blank=True, null=True)),
                ('customer_service', models.TextField(blank=True, null=True)),
                ('customer_service_en', models.TextField(blank=True, null=True)),
                ('customer_service_fr', models.TextField(blank=True, null=True)),
                ('customer_service_nl', models.TextField(blank=True, null=True)),
                ('data_quality_tags', models.JSONField(blank=True, default=list, null=True)),
                ('data_quality_warning_tags', models.JSONField(blank=True, default=list, null=True)),
                ('data_sources', models.TextField(blank=True, null=True)),
                ('data_sources_tags', models.JSONField(blank=True, default=list, null=True)),
                ('debug_param_sorted_langs', models.JSONField(blank=True, default=list, null=True)),
                ('debug_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ecoscore_data', models.JSONField(blank=True, default=dict, null=True)),
                ('ecoscore_extended_data', models.JSONField(blank=True, default=dict, null=True)),
                ('ecoscore_extended_data_version', models.TextField(blank=True, null=True)),
                ('emb_codes_20141016', models.TextField(blank=True, null=True)),
                ('emb_codes_orig', models.TextField(blank=True, null=True)),
                ('empty', models.TextField(blank=True, null=True)),
                ('environment_impact_level_tags', models.JSONField(blank=True, default=list, null=True)),
                ('environmental_score_grade', models.TextField(blank=True, null=True)),
                ('environmental_score_score', models.FloatField(blank=True, null=True)),
                ('expiration_date', models.TextField(blank=True, null=True)),
                ('food_groups', models.TextField(blank=True, null=True)),
                ('food_groups_tags', models.JSONField(blank=True, default=list, null=True)),
                ('forest_footprint_data', models.JSONField(blank=True, default=dict, null=True)),
                ('fruits_vegetables_nuts_100g_estimate', models.FloatField(blank=True, null=True)),
                ('generic_name', models.TextField(blank=True, null=True)),
                ('generic_name_en', models.TextField(blank=True, null=True)),
                ('grades', models.JSONField(blank=True, default=dict, null=True)),
                ('images', models.JSONField(blank=True, default=dict, null=True)),
                ('ingredients', models.JSONField(blank=True, default=dict, null=True)),
                ('ingredients_analysis_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_debug', models.JSONField(blank=True, default=dict, null=True)),
                ('ingredients_from_or_that_may_be_from_palm_oil_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_from_palm_oil_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_from_palm_oil_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_ids_debug', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_n_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_non_nutritive_sweeteners_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_original_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_sweeteners_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_text', models.TextField(blank=True, null=True)),
                ('ingredients_text_EN', models.TextField(blank=True, null=True)),
                ('ingredients_text_debug', models.TextField(blank=True, null=True)),
                ('ingredients_text_en', models.TextField(blank=True, null=True)),
                ('ingredients_text_with_allergens', models.TextField(blank=True, null=True)),
                ('ingredients_text_with_allergens_en', models.TextField(blank=True, null=True)),
                ('ingredients_that_may_be_from_palm_oil_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_that_may_be_from_palm_oil_tags', models.JSONField(blank=True, default=list, null=True)),
                ('ingredients_with_specified_percent_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_with_specified_percent_sum', models.FloatField(blank=True, null=True)),
                ('ingredients_with_unspecified_percent_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_without_ciqual_codes', models.TextField(blank=True, null=True)),
                ('ingredients_without_ciqual_codes_n', models.IntegerField(blank=True, null=True)),
                ('ingredients_without_ecobalyse_ids_n', models.IntegerField(blank=True, null=True)),
                ('interface_version_created', models.TextField(blank=True, null=True)),
                ('interface_version_modified', models.TextField(blank=True, null=True)),
                ('known_ingredients_n', models.IntegerField(blank=True, null=True)),
                ('labels', models.TextField(blank=True, null=True)),
                ('labels_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('labels_lc', models.TextField(blank=True, null=True)),
                ('labels_next_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('labels_next_tags', models.JSONField(blank=True, default=list, null=True)),
                ('labels_old', models.TextField(blank=True, null=True)),
                ('labels_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('labels_tags', models.JSONField(blank=True, default=list, null=True)),
                ('lang', models.CharField(blank=True, max_length=10, null=True)),
                ('languages', models.JSONField(blank=True, default=list, null=True)),
                ('languages_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('last_check_dates_tags', models.JSONField(blank=True, default=list, null=True)),
                ('last_checked_t', models.BigIntegerField(blank=True, null=True)),
                ('last_checker', models.TextField(blank=True, null=True)),
                ('last_updated_t', models.BigIntegerField(blank=True, null=True)),
                ('lc', models.CharField(blank=True, max_length=10, null=True)),
                ('max_imgid', models.CharField(blank=True, max_length=20, null=True)),
                ('minerals_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('minerals_tags', models.JSONField(blank=True, default=list, null=True)),
                ('new_additives_n', models.IntegerField(blank=True, null=True)),
                ('nova_group', models.IntegerField(blank=True, null=True)),
                ('nova_group_debug', models.TextField(blank=True, null=True)),
                ('nova_group_error', models.TextField(blank=True, null=True)),
                ('nova_group_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nova_groups', models.TextField(blank=True, null=True)),
                ('nova_groups_markers', models.JSONField(blank=True, default=dict, null=True)),
                ('nova_groups_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nucleotides_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nucleotides_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutrient_levels', models.JSONField(blank=True, default=dict, null=True)),
                ('nutrient_levels_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutriments', models.JSONField(blank=True, default=dict, null=True)),
                ('nutriments_estimated', models.JSONField(blank=True, default=dict, null=True)),
                ('nutriscore', models.JSONField(blank=True, default=dict, null=True)),
                ('nutriscore_2021_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutriscore_2023_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutriscore_data', models.JSONField(blank=True, default=dict, null=True)),
                ('nutriscore_grade', models.CharField(blank=True, max_length=1, null=True)),
                ('nutriscore_grade_producer', models.CharField(blank=True, max_length=1, null=True)),
                ('nutriscore_score', models.IntegerField(blank=True, null=True)),
                ('nutriscore_score_opposite', models.IntegerField(blank=True, null=True)),
                ('nutriscore_score_producer', models.IntegerField(blank=True, null=True)),
                ('nutriscore_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutriscore_version', models.CharField(blank=True, max_length=10, null=True)),
                ('nutrition_data', models.TextField(blank=True, null=True)),
                ('nutrition_data_per', models.CharField(blank=True, max_length=50, null=True)),
                ('nutrition_data_prepared', models.TextField(blank=True, null=True)),
                ('nutrition_data_prepared_per', models.CharField(blank=True, max_length=50, null=True)),
                ('nutrition_grades', models.CharField(blank=True, max_length=1, null=True)),
                ('nutrition_grades_tags', models.JSONField(blank=True, default=list, null=True)),
                ('nutrition_score_beverage', models.IntegerField(blank=True, null=True)),
                ('nutrition_score_debug', models.TextField(blank=True, null=True)),
                ('nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients', models.IntegerField(blank=True, db_column='nsw_fvl_ingr_est', null=True)),
                ('nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value', models.IntegerField(blank=True, db_column='nsw_fvl_ingr_est_val', null=True)),
                ('nutrition_score_warning_fruits_vegetables_legumes_from_category', models.IntegerField(blank=True, db_column='nsw_fvl_cat', null=True)),
                ('nutrition_score_warning_fruits_vegetables_nuts_estimate', models.FloatField(blank=True, null=True)),
                ('nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value', models.IntegerField(blank=True, db_column='nsw_fvn_ingr_est_val', null=True)),
                ('nutrition_score_warning_fruits_vegetables_nuts_from_category_value', models.IntegerField(blank=True, db_column='nsw_fvn_cat_val', null=True)),
                ('nutrition_score_warning_nutriments_estimated', models.BooleanField(null=True)),
                ('obsolete', models.BooleanField(null=True)),
                ('obsolete_since_date', models.CharField(blank=True, max_length=20, null=True)),
                ('origin', models.TextField(blank=True, null=True)),
                ('origin_en', models.TextField(blank=True, null=True)),
                ('origins', models.TextField(blank=True, null=True)),
                ('origins_en', models.TextField(blank=True, null=True)),
                ('origins_fr', models.TextField(blank=True, null=True)),
                ('other_information', models.TextField(blank=True, null=True)),
                ('other_information_fr', models.TextField(blank=True, null=True)),
                ('other_nutritional_substances_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('other_nutritional_substances_tags', models.JSONField(blank=True, default=list, null=True)),
                ('owner', models.TextField(blank=True, null=True)),
                ('owner_fields', models.JSONField(blank=True, default=dict, null=True)),
                ('packaging', models.TextField(blank=True, null=True)),
                ('packaging_materials_tags', models.JSONField(blank=True, default=list, null=True)),
                ('packaging_old', models.TextField(blank=True, null=True)),
                ('packaging_recycling_tags', models.JSONField(blank=True, default=list, null=True)),
                ('packaging_shapes_tags', models.JSONField(blank=True, default=list, null=True)),
                ('packaging_text', models.TextField(blank=True, null=True)),
                ('packagings', models.JSONField(blank=True, default=list, null=True)),
                ('packagings_complete', models.BooleanField(null=True)),
                ('packagings_materials', models.JSONField(blank=True, default=dict, null=True)),
                ('packagings_materials_main', models.TextField(blank=True, null=True)),
                ('periods_after_opening', models.TextField(blank=True, null=True)),
                ('periods_after_opening_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('periods_after_opening_lc', models.TextField(blank=True, null=True)),
                ('periods_after_opening_tags', models.JSONField(blank=True, default=list, null=True)),
                ('pnns_groups_1', models.TextField(blank=True, null=True)),
                ('pnns_groups_1_tags', models.JSONField(blank=True, default=list, null=True)),
                ('pnns_groups_2', models.TextField(blank=True, null=True)),
                ('pnns_groups_2_tags', models.JSONField(blank=True, default=list, null=True)),
                ('popularity_tags', models.JSONField(blank=True, default=list, null=True)),
                ('preparation', models.TextField(blank=True, null=True)),
                ('preparation_de', models.TextField(blank=True, null=True)),
                ('preparation_en', models.TextField(blank=True, null=True)),
                ('preparation_fr', models.TextField(blank=True, null=True)),
                ('preparation_nl', models.TextField(blank=True, null=True)),
                ('producer', models.TextField(blank=True, null=True)),
                ('producer_de', models.TextField(blank=True, null=True)),
                ('producer_en', models.TextField(blank=True, null=True)),
                ('producer_fr', models.TextField(blank=True, null=True)),
                ('producer_product_id', models.TextField(blank=True, null=True)),
                ('producer_version_id', models.TextField(blank=True, null=True)),
                ('product_name', models.TextField(blank=True, null=True)),
                ('product_name_en', models.TextField(blank=True, null=True)),
                ('product_quantity', models.FloatField(blank=True, null=True)),
                ('product_quantity_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('quality_tags', models.JSONField(blank=True, default=list, null=True)),
                ('quantity', models.CharField(blank=True, max_length=50, null=True)),
                ('recycling_instructions_to_recycle_en', models.TextField(blank=True, null=True)),
                ('removed_countries_tags', models.JSONField(blank=True, default=list, null=True)),
                ('rev', models.IntegerField(blank=True, null=True)),
                ('scans_n', models.IntegerField(blank=True, null=True)),
                ('schema_version', models.CharField(blank=True, max_length=10, null=True)),
                ('scores', models.JSONField(blank=True, default=dict, null=True)),
                ('server', models.CharField(blank=True, max_length=50, null=True)),
                ('serving_quantity', models.FloatField(blank=True, null=True)),
                ('serving_quantity_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('serving_size', models.CharField(blank=True, max_length=50, null=True)),
                ('sortkey', models.IntegerField(blank=True, null=True)),
                ('sources', models.JSONField(blank=True, default=list, null=True)),
                ('specific_ingredients', models.JSONField(blank=True, default=list, null=True)),
                ('states', models.TextField(blank=True, null=True)),
                ('states_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('states_tags', models.JSONField(blank=True, default=list, null=True)),
                ('taxonomies_enhancer_tags', models.JSONField(blank=True, default=list, null=True)),
                ('teams', models.TextField(blank=True, null=True)),
                ('teams_tags', models.JSONField(blank=True, default=list, null=True)),
                ('traces', models.TextField(blank=True, null=True)),
                ('traces_from_user', models.TextField(blank=True, null=True)),
                ('traces_hierarchy', models.JSONField(blank=True, default=list, null=True)),
                ('traces_lc', models.TextField(blank=True, null=True)),
                ('traces_tags', models.JSONField(blank=True, default=list, null=True)),
                ('unique_scans_n', models.IntegerField(blank=True, null=True)),
                ('unknown_ingredients_n', models.IntegerField(blank=True, null=True)),
                ('update_key', models.CharField(blank=True, max_length=50, null=True)),
                ('vitamins_prev_tags', models.JSONField(blank=True, default=list, null=True)),
                ('vitamins_tags', models.JSONField(blank=True, default=list, null=True)),
                ('warning', models.TextField(blank=True, null=True)),
                ('warning_de', models.TextField(blank=True, null=True)),
                ('warning_en', models.TextField(blank=True, null=True)),
                ('warning_fr', models.TextField(blank=True, null=True)),
                ('warning_nl', models.TextField(blank=True, null=True)),
                ('weighers_tags', models.JSONField(blank=True, default=list, null=True)),
                ('with_sweeteners', models.BooleanField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DailyCalorieTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='The date for which calories are being tracked.')),
                ('total_calories', models.PositiveIntegerField(default=0, help_text='Total calories consumed for the day.')),
                ('calorie_goal', models.PositiveIntegerField(default=2000, help_text='Daily calorie intake goal.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protein_grams', models.FloatField(default=0, help_text='Grams of protein consumed.')),
                ('carbs_grams', models.FloatField(default=0, help_text='Grams of carbohydrates consumed.')),
                ('fat_grams', models.FloatField(default=0, help_text='Grams of fat consumed.')),
                ('user', models.ForeignKey(help_text='The user whose calories are being tracked.', on_delete=django.db.models.deletion.CASCADE, related_name='calorie_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.CreateModel(
            name='FoodEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(blank=True, help_text='Name of the food consumed (auto‐populated from product).', max_length=255)),
                ('serving_size', models.FloatField(help_text='Amount of food consumed in grams or milliliters.')),
                ('serving_unit', models.CharField(default='g', help_text='Unit of measurement (g, ml, oz, etc.).', max_length=20)),
                ('calories', models.PositiveIntegerField(blank=True, help_text='Calories in this food entry (calculated based on serving size).', null=True)),
                ('protein', models.FloatField(blank=True, help_text='Grams of protein.', null=True)),
                ('carbs', models.FloatField(blank=True, help_text='Grams of carbohydrates.', null=True)),
                ('fat', models.FloatField(blank=True, help_text='Grams of fat.', null=True)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], default='snack', help_text='The meal this food was consumed with.', max_length=20)),
                ('time_consumed', models.DateTimeField(help_text='When the food was consumed.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_log', models.ForeignKey(help_text='The daily log this food entry belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='food_entries', to='nutrition.dailycalorietracker')),
                ('food_product', models.ForeignKey(help_text='The food product consumed.', on_delete=django.db.models.deletion.PROTECT, related_name='entries', to='nutrition.foodproduct')),
            ],
        ),
    ]
