# Generated by Django 5.2 on 2025-07-09 18:14

import django.contrib.postgres.search
from django.db import migrations
from django.contrib.postgres.operations import TrigramExtension, UnaccentExtension


class Migration(migrations.Migration):

    dependencies = [
        ('nutrition', '0017_add_search_indexes'),
    ]

    operations = [
        # Enable PostgreSQL extensions (with IF NOT EXISTS to avoid conflicts)
        migrations.RunSQL(
            "CREATE EXTENSION IF NOT EXISTS pg_trgm;",
            reverse_sql="DROP EXTENSION IF EXISTS pg_trgm;"
        ),
        migrations.RunSQL(
            "CREATE EXTENSION IF NOT EXISTS unaccent;",
            reverse_sql="DROP EXTENSION IF EXISTS unaccent;"
        ),
        
        # Add search vector field
        migrations.AddField(
            model_name='foodproduct',
            name='search_vector',
            field=django.contrib.postgres.search.SearchVectorField(blank=True, null=True),
        ),
        
        # Create GIN index on search_vector for fast full-text search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_search_vector_gin ON nutrition_foodproduct USING GIN (search_vector);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_search_vector_gin;"
        ),
        
        # Create trigram indexes for similarity search
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_product_name_trgm ON nutrition_foodproduct USING GIN (product_name gin_trgm_ops);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_product_name_trgm;"
        ),
        
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_brands_trgm ON nutrition_foodproduct USING GIN (brands gin_trgm_ops);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_brands_trgm;"
        ),
        
        # Note: We'll populate search_vector in batches using a management command
        # to avoid statement timeouts with 3.5M records
        
        # Create trigger to automatically update search_vector on changes
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION nutrition_foodproduct_search_vector_trigger() RETURNS trigger AS $$
            BEGIN
                NEW.search_vector := to_tsvector('english', 
                    COALESCE(unaccent(NEW.product_name), '') || ' ' || 
                    COALESCE(unaccent(NEW.brands), '') || ' ' ||
                    COALESCE(unaccent(NEW.categories), '') || ' ' ||
                    COALESCE(unaccent(NEW.ingredients_text), '')
                );
                RETURN NEW;
            END
            $$ LANGUAGE plpgsql;
            
            DROP TRIGGER IF EXISTS nutrition_foodproduct_search_vector_update ON nutrition_foodproduct;
            CREATE TRIGGER nutrition_foodproduct_search_vector_update 
            BEFORE INSERT OR UPDATE ON nutrition_foodproduct 
            FOR EACH ROW EXECUTE FUNCTION nutrition_foodproduct_search_vector_trigger();
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS nutrition_foodproduct_search_vector_update ON nutrition_foodproduct;
            DROP FUNCTION IF EXISTS nutrition_foodproduct_search_vector_trigger();
            """
        ),
    ]
