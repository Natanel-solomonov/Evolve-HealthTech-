# Generated by Django for search optimization

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('nutrition', '0018_foodproduct_search_vector'),
    ]

    operations = [
        # Add functional btree index for prefix searches on product_name
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_product_name_lower_prefix ON nutrition_foodproduct USING btree (lower(product_name) text_pattern_ops);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_product_name_lower_prefix;"
        ),
        
        # Add functional btree index for prefix searches on brands
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_brands_lower_prefix ON nutrition_foodproduct USING btree (lower(brands) text_pattern_ops);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_brands_lower_prefix;"
        ),
        
        # Ensure trigram threshold is optimized (default is 0.3, we can lower it to 0.2 for more results)
        migrations.RunSQL(
            "SELECT set_limit(0.2);",
            reverse_sql="SELECT set_limit(0.3);"
        ),
        
        # Add composite index for better sorting performance
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_popularity_name ON nutrition_foodproduct (popularity_key DESC, product_name) WHERE (obsolete IS NULL OR obsolete = FALSE);",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_popularity_name;"
        ),
        
        # Add index for search vector queries with popularity
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS nutrition_foodproduct_search_vector_popularity ON nutrition_foodproduct (popularity_key DESC) WHERE search_vector IS NOT NULL;",
            reverse_sql="DROP INDEX IF EXISTS nutrition_foodproduct_search_vector_popularity;"
        ),
    ] 