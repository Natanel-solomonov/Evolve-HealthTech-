# Generated by Django 5.2.4 on 2025-07-28 21:45

from django.db import migrations, models
from decimal import Decimal


def convert_lifetime_savings_to_decimal(apps, schema_editor):
    """
    Convert existing lifetime_savings values from cents (integer) to dollars (decimal).
    Divides existing values by 100 to convert from cents to dollars.
    """
    AppUser = apps.get_model('api', 'AppUser')
    
    for user in AppUser.objects.all():
        if user.lifetime_savings_temp is None:
            # Convert from cents to dollars (divide by 100)
            user.lifetime_savings_temp = Decimal(str(user.lifetime_savings)) / Decimal('100')
            user.save(update_fields=['lifetime_savings_temp'])


def reverse_lifetime_savings_to_integer(apps, schema_editor):
    """
    Reverse operation: convert decimal dollars back to integer cents.
    Multiplies values by 100 to convert from dollars to cents.
    """
    AppUser = apps.get_model('api', 'AppUser')
    
    for user in AppUser.objects.all():
        if user.lifetime_savings_temp is not None:
            # Convert from dollars to cents (multiply by 100)
            user.lifetime_savings = int(user.lifetime_savings_temp * Decimal('100'))
            user.save(update_fields=['lifetime_savings'])


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0086_remove_maxproposition_and_discountcode_models'),
    ]

    operations = [
        # Step 1: Add temporary decimal field
        migrations.AddField(
            model_name='appuser',
            name='lifetime_savings_temp',
            field=models.DecimalField(
                decimal_places=2,
                default=0.00,
                help_text='Temporary field for migration - Total savings in dollars.',
                max_digits=10,
                null=True
            ),
        ),
        
        # Step 2: Convert data from cents to dollars
        migrations.RunPython(
            convert_lifetime_savings_to_decimal,
            reverse_lifetime_savings_to_integer
        ),
        
        # Step 3: Remove old integer field
        migrations.RemoveField(
            model_name='appuser',
            name='lifetime_savings',
        ),
        
        # Step 4: Rename temporary field to original name
        migrations.RenameField(
            model_name='appuser',
            old_name='lifetime_savings_temp',
            new_name='lifetime_savings',
        ),
        
        # Step 5: Update field constraints and make it non-nullable
        migrations.AlterField(
            model_name='appuser',
            name='lifetime_savings',
            field=models.DecimalField(
                decimal_places=2,
                default=0.00,
                help_text='Total savings earned by the user over their lifetime in dollars (e.g., 115.30).',
                max_digits=10
            ),
        ),
    ]
