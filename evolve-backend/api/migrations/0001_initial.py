# Generated by Django 5.2 on 2025-04-29 02:16

import datetime
import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fitness', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Name of the partner brand.', max_length=255, unique=True)),
                ('contact_email', models.EmailField(help_text='Primary contact email for the affiliate.', max_length=254, unique=True)),
                ('contact_phone', models.CharField(blank=True, help_text='Contact phone number.', max_length=15, null=True)),
                ('website', models.URLField(blank=True, help_text='Website URL for the affiliate.', null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the affiliate is active.')),
            ],
        ),
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(help_text='Format: +11234567890', max_length=15, unique=True)),
                ('name', models.CharField(help_text="User's full name.", max_length=255)),
                ('otp_code', models.CharField(blank=True, help_text='Latest OTP code sent to the user.', max_length=6, null=True)),
                ('otp_created_at', models.DateTimeField(blank=True, help_text='Timestamp when the OTP was generated.', null=True)),
                ('is_phone_verified', models.BooleanField(default=False, help_text='Indicates whether the user has verified their phone number.')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='ContentCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The main content of the card.')),
                ('bolded_words', models.JSONField(default=list, help_text='List of words that should be bolded in the text. These words must exist in the text.')),
            ],
        ),
        migrations.CreateModel(
            name='FriendCircle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the friend circle.', max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the friend circle was created.')),
            ],
        ),
        migrations.CreateModel(
            name='PhoneNumberList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=15), blank=True, default=list, help_text="List of phone numbers (e.g., ['+12223334444', '+15556667777']).", size=None)),
            ],
            options={
                'verbose_name': 'Phone Number List',
                'verbose_name_plural': 'Phone Number Lists',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField()),
                ('pointValue', models.IntegerField(db_index=True)),
                ('isComplete', models.BooleanField(default=False)),
                ('category', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Fitness', 'Fitness'), ('Nutrition', 'Nutrition'), ('Sleep', 'Sleep'), ('Mind', 'Mind')], max_length=50), blank=True, default=list, help_text='Category or categories of the activity (Fitness, Nutrition, Sleep, Mind).', size=None)),
                ('associated_workout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='fitness.workout', verbose_name='Associated Workout')),
            ],
            options={
                'verbose_name_plural': 'Activities',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ActivityPlan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default='Unnamed', help_text='Name of the activity plan.', max_length=255, null=True)),
                ('friday_activities', models.ManyToManyField(related_name='friday_activities', to='api.activity')),
                ('monday_activities', models.ManyToManyField(related_name='monday_activities', to='api.activity')),
                ('saturday_activities', models.ManyToManyField(related_name='saturday_activities', to='api.activity')),
                ('sunday_activities', models.ManyToManyField(related_name='sunday_activities', to='api.activity')),
                ('thursday_activities', models.ManyToManyField(related_name='thursday_activities', to='api.activity')),
                ('tuesday_activities', models.ManyToManyField(related_name='tuesday_activities', to='api.activity')),
                ('wednesday_activities', models.ManyToManyField(related_name='wednesday_activities', to='api.activity')),
            ],
        ),
        migrations.CreateModel(
            name='AffiliatePromotion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the promotion. (i.e. Free Salad)', max_length=255)),
                ('description', models.TextField(help_text='Description of the deal/promotion being offered.')),
                ('start_date', models.DateTimeField(help_text='Start date of the promotion.')),
                ('end_date', models.DateTimeField(help_text='End date of the promotion.')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the promotion is currently active.')),
                ('affiliate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='api.affiliate')),
                ('assigned_users', models.ManyToManyField(blank=True, help_text='Users who are assigned this promotion.', related_name='assigned_promotions', to='api.appuser')),
            ],
        ),
        migrations.CreateModel(
            name='AppUserCompletedActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('completed_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Timestamp when the activity was marked as completed.')),
                ('activity', models.ForeignKey(help_text='The specific activity that was completed.', on_delete=django.db.models.deletion.CASCADE, related_name='completions', to='api.activity')),
                ('source_plan', models.ForeignKey(blank=True, help_text='The activity plan this completion originated from, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_activities_originating_from_plan', to='api.activityplan')),
                ('user', models.ForeignKey(help_text='The user who completed the activity.', on_delete=django.db.models.deletion.CASCADE, related_name='completed_activities_history', to='api.appuser')),
            ],
            options={
                'verbose_name': 'User Completed Activity',
                'verbose_name_plural': 'User Completed Activities',
                'ordering': ['-completed_at'],
            },
        ),
        migrations.CreateModel(
            name='AppUserCurrentActivityPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isComplete', models.BooleanField(db_index=True, default=False)),
                ('dateCompleted', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('activity_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_assignments', to='api.activityplan')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='current_activity_plan', to='api.appuser')),
            ],
        ),
        migrations.CreateModel(
            name='AppUserCurrentEmotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feeling', models.CharField(max_length=255)),
                ('causes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, help_text='List of reasons the user tapped.', size=None)),
                ('impacts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, help_text='List of impact reasons the user tapped.', size=None)),
                ('logged_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='current_emotions', to='api.appuser')),
            ],
            options={
                'ordering': ['-logged_at'],
            },
        ),
        migrations.CreateModel(
            name='AppUserGoals',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goals_raw', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, help_text='A list of raw goal strings.', size=None)),
                ('goals_processed', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('lose_weight', 'Lose Weight'), ('gain_muscle', 'Gain Muscle'), ('improve_endurance', 'Improve Endurance'), ('increase_flexibility', 'Increase Flexibility')], max_length=50), blank=True, default=list, help_text='A list of processed goals, restricted to allowed choices.', size=None)),
                ('user', models.OneToOneField(help_text='The AppUser associated with these goals.', on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='api.appuser')),
            ],
        ),
        migrations.CreateModel(
            name='AppUserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.FloatField(help_text='Height in inches.')),
                ('birthday', models.DateField(help_text='Birthday of the user.')),
                ('weight', models.FloatField(help_text='Weight in pounds.')),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], help_text='Sex of the user.', max_length=1)),
                ('user', models.OneToOneField(help_text='The AppUser associated with this extra info.', on_delete=django.db.models.deletion.CASCADE, related_name='info', to='api.appuser')),
            ],
        ),
        migrations.CreateModel(
            name='FriendCircleEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('MEMBER_JOINED', 'Member Joined'), ('MEMBER_LEFT', 'Member Left'), ('ACTIVITY_COMPLETED', 'Activity Completed')], db_index=True, help_text='The type of event that occurred.', max_length=50)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the event occurred.')),
                ('completed_activity', models.ForeignKey(blank=True, help_text='Link to the completed activity record, if applicable.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='friend_circle_event_links', to='api.appusercompletedactivity')),
                ('friend_circle', models.ForeignKey(help_text='The friend circle where the event occurred.', on_delete=django.db.models.deletion.CASCADE, related_name='events', to='api.friendcircle')),
                ('user', models.ForeignKey(help_text='The user associated with the event (joined, left, completed activity).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='friend_circle_events', to='api.appuser')),
            ],
            options={
                'verbose_name': 'Friend Circle Event',
                'verbose_name_plural': 'Friend Circle Events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='MaxProposition',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('text', models.TextField(help_text='Beyond 40 characters is truncate.')),
                ('associated_affiliate_promotion', models.ForeignKey(blank=True, help_text='Optional affiliate promotion associated with this proposition.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='max_propositions', to='api.affiliatepromotion')),
            ],
        ),
        migrations.AddField(
            model_name='appuser',
            name='max_propositions',
            field=models.ManyToManyField(blank=True, help_text='Propositions associated with this user.', related_name='users', to='api.maxproposition'),
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the user joined the friend circle.')),
                ('isAdmin', models.BooleanField(default=False, help_text='Indicates if the user is an admin of the friend circle.')),
                ('friend_circle', models.ForeignKey(help_text='The friend circle to which this membership belongs.', on_delete=django.db.models.deletion.CASCADE, related_name='friend_circle_members', to='api.friendcircle')),
                ('user', models.ForeignKey(help_text='Reference to the AppUser who is a member of the friend circle.', on_delete=django.db.models.deletion.CASCADE, related_name='circle_memberships', to='api.appuser')),
            ],
        ),
        migrations.AddField(
            model_name='friendcircle',
            name='members',
            field=models.ManyToManyField(help_text='Members of the friend circle.', related_name='friend_circles', through='api.Member', to='api.appuser'),
        ),
        migrations.CreateModel(
            name='ReadingContent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Title of the reading content.', max_length=255)),
                ('duration', models.DurationField(blank=True, default=datetime.timedelta(0))),
                ('description', models.TextField(blank=True, help_text='Description of the reading content.', null=True)),
                ('cover_image', models.ImageField(blank=True, help_text='Cover image for the reading content.', null=True, upload_to='cover_images/')),
                ('category', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Fitness', 'Fitness'), ('Nutrition', 'Nutrition'), ('Sleep', 'Sleep'), ('Mind', 'Mind')], max_length=50), blank=True, default=list, help_text='Category or categories of the reading content (Fitness, Nutrition, Sleep, Mind).', size=None)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the reading content was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the reading content was last updated.')),
                ('content_cards', models.ManyToManyField(help_text='Array of content cards associated with this reading content.', related_name='reading_contents', to='api.contentcard')),
            ],
        ),
        migrations.AddField(
            model_name='activity',
            name='associated_reading',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to='api.readingcontent', verbose_name='Associated Reading Content'),
        ),
        migrations.CreateModel(
            name='AffiliatePromotionRedemption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('redeemed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the promotion was redeemed.')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='redemptions', to='api.affiliatepromotion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotion_redemptions', to='api.appuser')),
            ],
            options={
                'unique_together': {('promotion', 'user')},
            },
        ),
        migrations.CreateModel(
            name='AffiliatePromotionDiscountCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text='Unique discount code generated for a user and promotion.', max_length=20, unique=True)),
                ('is_used', models.BooleanField(default=False, help_text='Indicates if the discount code has been used.')),
                ('affiliate_promotion', models.ForeignKey(help_text='The promotion this code belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='discount_codes', to='api.affiliatepromotion')),
                ('assigned_user', models.ForeignKey(help_text='The user this specific code is assigned to.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount_codes', to='api.appuser')),
            ],
            options={
                'verbose_name': 'Affiliate Promotion Discount Code',
                'verbose_name_plural': 'Affiliate Promotion Discount Codes',
                'unique_together': {('affiliate_promotion', 'assigned_user')},
            },
        ),
        migrations.CreateModel(
            name='AppUserDailyEmotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feeling', models.CharField(max_length=255)),
                ('causes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('impacts', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('logged_at', models.DateTimeField(auto_now_add=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_emotions', to='api.appuser')),
            ],
            options={
                'ordering': ['-logged_at'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
